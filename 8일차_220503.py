# 사용자 함수

## 함수 용어 정리

    입력값 = 인수, 인자, 매개변수, 파라미터
    출력값 = 결과값, 반환값, 돌려주는 값 (return)

## 매개변수(입력값), 반환값(출력값) 이 없는 가장 간단한 함수

    <형식>
    def 함수이름():     # 함수 정의
        수행할 코드

    함수이름()          # 함수 호출


def hello():    # 함수 정의
    print('hello, world!')

hello()     # 함수 호출
hello()
hello()

======================실행 결과======================
hello, world!
hello, world!
hello, world!


## 매개변수(입력값)만 있는 함수

    <형식>
    def 함수이름(매개변수1, 매개변수2, ...):     # 함수 정의
        수행할 코드

    함수이름(매개변수1, 매개변수2, ...)     # 함수 호출


# ex)

def add(a, b):  # 함수 정의
    print(a + b)

add(1, 2)   # 함수 호출
add(100,200)

x = 6
y = 3

add(x, y)   # 함수 호출

n1 = int(input('첫번째 값을 입력하세요 :'))
n2 = int(input('두번째 값을 입력하세요 :'))

add(n1, n2)

======================실행 결과======================
3
300
9
첫번째 값을 입력하세요 :15
두번째 값을 입력하세요 :22
37


## 매개변수(입력값)와 출력값(반환값)이 1개인 함수

     <형식>
     def 함수이름(매개변수1, 매개변수2, ...):   # 함수 정의
         수행할 코드
         return 반환값(출력값)
        
    결과변수명 = 함수이름(인수1, 인수2, ...)     # 함수 호출


# ex)

def add(a, b):  #함수 정의
    return a + b

print(add(10, 20)) # 함수 호출 후 print문으로 결과를 본다.

n1 = add(100, 200)  # 함수 호출 후 결과값을 n1 변수에 다시 담았다.
print(n1)   # 실제로 담겼는지 print문으로 확인해본다.

n2 = add(1000, 2000)
print(n2)

======================실행 결과======================
30
300
3000


## 매개변수(입력값), 반환값(출력값)이 2개 이상인 함수

    <형식>
    def 함수이름(매개변수1, 매개변수2):     # 함수 정의
        수행할 코드
        return 반환값1, 반환값2

    결과변수1, 결과변수2 = 함수이름(인수1, 인수2)   # 함수 호출


# ex)

def add_sub(a, b):  # 함수 정의
    return a + b, a - b

print(add_sub(10, 20))  # 함수 호출(튜플 형식으로 반환)

x, y = add_sub(100,200)
print(x)    # 첫번째 결과값을 x변수에
print(y)    # 두번째 결과값을 y변수에 담는다.

======================실행 결과======================
(30, -10)
300
-100


## 디폴트 매개변수 (매개변수에 초기값을 주는것)

def info(name, age, address = '비공개'):   # 함수 정의
    print('이름 :', name)
    print('나이 :', age)
    print('주소 :', address)
    print()

info('네오', 27)  # 함수 호출
info('프로도', 25, '제주도')

======================실행 결과======================
이름 : 네오
나이 : 27
주소 : 비공개

이름 : 프로도
나이 : 25
주소 : 제주도


## 키워드 인수 : 각각의 매개변수가 어떤 용도인지 알기 어려울 때 사용

def info(name, age, address): # 함수 정의
    print('이름 :', name)
    print('나이 :', age)
    print('주소 :', address)
    print()

info('라이언',20,'대구')     # 일반적인 호출방식
info(name = '어피치', age = 20, address = '부산')    # 키워드로 지정
info(age = 40, address = '서울', name = '무지')     # 키워드방식일땐 순서를 다르게 지정해도 된다.

======================실행 결과======================
이름 : 라이언
나이 : 20
주소 : 대구

이름 : 어피치
나이 : 20
주소 : 부산

이름 : 무지
나이 : 40
주소 : 서울


## 가변 매개변수 : 매개변수(입력값)의 개수를 정확히 모를 때

    <형식>
    def 함수이름(*매개변수명):   # 함수 정의     파이썬에서 * 표시는 튜플로 묶어라 라는뜻
        수행할 코드

    함수이름(필요한 인수만큼 입력)   # 함수 호출


# 191p)

def adder(*args):   # 함수 정의
    print('{}의 합은 {}입니다.'.format(args, sum(args)))

adder(1, 2)     # 함수 호출
adder(1, 2, 3)
adder(1, 2, 3, 4)
adder(1, 2, 3, 4, 5)

======================실행 결과======================
(1, 2)의 합은 3입니다.
(1, 2, 3)의 합은 6입니다.
(1, 2, 3, 4)의 합은 10입니다.
(1, 2, 3, 4, 5)의 합은 15입니다.


# ex)

def add_mul(choice, *args):     # 함수 정의(가변 매개변수는 맨 뒤에 있어야 함)
    if choice == 'add' :    # choice 매개변수의 값이 add라면
        answer = 0  # 합계를 구할 변수 초기값을 0으로 한다.
        for i in args:  # 가변 매개변수 args의 개수만큼 반복
            answer += i
    elif choice == 'mul':   # choice 매개변수의 값이 mul이라면
        answer = 1  # 변수 초기값을 1로 한다.
        for i in args:
            answer *= i
    return answer   # 결과로 나온 answer을 반환한다.

a = add_mul('add', 1, 2, 3, 4)  # 1+2+3+4
print(a)

b = add_mul('mul', 1, 2, 3, 4)  # 1*2*3*4
print(b)

======================실행 결과======================
10
24


## 지역변수 / 전역변수

    지역변수 : 한정된 지역(함수)에서 사용
    전역변수 : 프로그램 전체에서 사용
              예약어 global


a = 200     # 전역변수 (프로그램 전체에서 사용)

def func1():    # 함수 정의
    a = 10      # 지역변수(이 함수 안에서만 사용)
    print('func1 함수에서의 a의 값 :',a)


print('함수 바깥에서의 a의 값 :',a)
            
def func2():    # 함수 정의
    print('func2 함수에서의 a의 값 :',a)

func1()
func2()

======================실행 결과======================
함수 바깥에서의 a의 값 : 200
func1 함수에서의 a의 값 : 10
func2 함수에서의 a의 값 : 200
    

# ex) 전역변수의 값을 변경해야 하는 경우

a = 0   # 전역변수

def f():    # 함수 정의
    global a    # 전역변수 a를 가리킨다.
    a = 10      # 전역변수 a의 값을 10으로 변경한다.
    

print('함수 호출 전 a의 값 :',a)
f()  # 함수 호출
print('함수 호출 후 a의 값 :',a)

======================실행 결과======================
함수 호출 전 a의 값 : 0
함수 호출 후 a의 값 : 10

    
# 195p)

def coffee_machine(money, pick):    # 함수 정의
    print('{}원에 {}를 선택하셨습니다.'.format(money, pick))
    menu = {
        '아메리카노':1000,
        '카페라떼':1500,
        '카푸치노':2000
        }
    if pick not in menu:    # 메뉴에 없는 음료라면
        print('{}는 판매하지 않습니다.'.format(pick))
        return money, '없는 메뉴'   # 돈을 다시 돌려준다. 없는 메뉴라는 글자를 반환.
    elif menu[pick] > money:    # 해당 음료의 금액이 부족한 경우
        print('{}는 {}원입니다.'.format(pick, menu[pick]))
        return(money, '금액 부족')
    else:   # 정상적인 경우
        return money - menu[pick], pick     # 음료값을 제외한 나머지 금액을 돌려준다
                                            # 음료 이름도 반환한다.

order = input('커피를 선택하세요.(아메리카노, 카페라떼, 카푸치노) >>>')  # 매개변수 pick
pay = int(input('얼마를 내시나요? >>>')) # 매개변수 money

change, coffee = coffee_machine(pay, order)     # 반환값이 2개이므로 변수2개 설정
print('잔돈 {}원, 커피 {}'.format(change, coffee))

======================실행 결과======================
커피를 선택하세요.(아메리카노, 카페라떼, 카푸치노) >>>아메리카노
얼마를 내시나요? >>>2000
2000원에 아메리카노를 선택하셨습니다.
잔돈 1000원, 커피 아메리카노


